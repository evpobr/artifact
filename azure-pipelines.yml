jobs:
  - job: Windows
    pool:
      vmImage: vs2017-win2016
    strategy:
      maxParallel: 2
      matrix:
        Win32:
          buildPlatform: 'Win32'
        x64:
          buildPlatform: 'x64'
    steps:
    - task: CMake@1
      displayName: 'CMake configure'
      inputs:
        cmakeArgs: '-G "Visual Studio 15 2017" -A $(buildPlatform) -DCMAKE_BUILD_TYPE=Release .. '
    - task: CMake@1
      displayName: 'CMake build'
      inputs:
        cmakeArgs: '--build . --config Release'

  - job: Linux
    pool:
      vmImage: Ubuntu-16.04
    strategy:
      maxParallel: 2
      matrix:
        GCC:
          cCompiler: gcc
          cxxCompiler: g++
        Clang:
          cCompiler: clang
          cxxCompiler: clang++
    steps:
    - script: |
        sudo apt update
        sudo apt install clang
      displayName: 'Install dependencies'
      condition: eq(variables['cCompiler'], 'clang')
    - task: CMake@1
      displayName: 'CMake configure'
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '-DCMAKE_C_COMPILER=$(cCompiler) -DCMAKE_CXX_COMPILER=$(cxxCompiler) -DCMAKE_BUILD_TYPE=Release ..'
    - task: CMake@1
      displayName: 'CMake build'
      inputs:
        cmakeArgs: '--build . --config Release'

  - job: macOS
    pool:
      vmImage: macOS-10.14
    steps:
    - task: CMake@1
      displayName: 'CMake configure'
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '-DCMAKE_BUILD_TYPE=Release ..'
    - task: CMake@1
      displayName: 'CMake build'
      inputs:
        cmakeArgs: '--build . --config Release'
